/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.ucieffe.kata.goosegame;

import java.io.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class GooseGame {

    public static final String ADD_PLAYER_COMMAND_PREFIX = "add player ";

    private final OutputChannel outputChannel;
    private final LinkedHashMap<String, Player> players;

    public GooseGame(OutputChannel out) {
        outputChannel = out;
        players = new LinkedHashMap<>();
    }

    public void nextCommand(String command) {
        String result = "No command recognized";
        if(command.startsWith(ADD_PLAYER_COMMAND_PREFIX)) {
            Player player = extractPlayerFrom(command);
            if(isAnExistentPlayer(player)) {
                result = player.getName() + ": already existing player";
            } else {
                players.put(player.getName(), player);
                result = returnAddPlayerResult();
            }
        } else if (isMoveCommand(command)) {
            Move move = extractMoveFrom(command);
            Player player = players.get(move.getPlayerName());
            Integer currentPosition = player.getCurrentPosition();
            player.movePosition(move);
            if(currentPosition == 0) {
                result = String.format(
                        "%s rolls %d, %d. %s moves from Start to %d",
                        move.getPlayerName(), move.getFirstDice(), move.getSecondDice(),
                        move.getPlayerName(), player.getCurrentPosition()
                );
            } else {
                result = String.format(
                        "%s rolls %d, %d. %s moves from %d to %d",
                        move.getPlayerName(), move.getFirstDice(), move.getSecondDice(),
                        move.getPlayerName(), currentPosition, player.getCurrentPosition()
                );
            }
        }
        outputChannel.write(result);
    }

    private Move extractMoveFrom(String command) {
        Pattern pattern = Pattern.compile("^move (\\w+) ([1-6]), ([1-6])");
        Matcher matcher = pattern.matcher(command);
        if (matcher.find()) {
            String player = matcher.group(1);
            String firstDice = matcher.group(2);
            String secondDice = matcher.group(3);
            return new Move(player, Integer.parseInt(firstDice), Integer.parseInt(secondDice));
        } else {
            throw new IllegalArgumentException(command);
        }
    }

    private boolean isMoveCommand(String command) {
        Pattern pattern = Pattern.compile("^move (\\w+) ([1-6]), ([1-6])");
        Matcher matcher = pattern.matcher(command);
        return matcher.matches();
    }

    private boolean isAnExistentPlayer(Player player) {
        return players.containsKey(player.getName());
    }

    private Player extractPlayerFrom(String command) {
        return new Player(command.substring(ADD_PLAYER_COMMAND_PREFIX.length()));
    }

    private String returnAddPlayerResult() {
        return "players: " + concatenateAllPlayers();
    }

    private String concatenateAllPlayers() {
        return players.entrySet().stream()
                .map(Map.Entry::getKey)
                .collect(Collectors.joining(", "));
    }

    public static void main(String[] args) {
        InputChannel inputChannel = new SystemInputChannel(new BufferedReader(new InputStreamReader(System.in)));
        OutputChannel outputChannel = new SystemOutputChannel(System.out);
        GooseGame gooseGame = new GooseGame(outputChannel);
        while(true) {
            String command = inputChannel.read();
            gooseGame.nextCommand(command);
        }
    }
}
